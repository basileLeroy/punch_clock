{"version":3,"file":"punchclock_setup.min.js","sources":["../src/punchclock_setup.js"],"sourcesContent":["/**\n * Remove default buttons since custom buttons are used.\n * @param {Array} buttons - List of buttons to remove\n */\nfunction removeDefaultButtons(buttons) {\n    buttons.forEach(button => {\n        if (button[0]) {\n            let parent = button[0].parentElement;\n            parent.className = \"d-none\";\n        }\n    });\n}\n\n/**\n * Use the click event of the custom button to trigger the default click action.\n * @param {HTMLElement} customButton - The custom button\n * @param {HTMLElement} defaultButton - The default button\n */\nfunction redirectCustomButtonToDefaultAction(customButton, defaultButton) {\n    if (customButton && defaultButton) {\n        customButton.addEventListener(\"click\", function() {\n            defaultButton.click();\n        });\n    }\n}\n\n/**\n * Time Block Button Visibilty controller. Hides the button once a second time block has been added.\n * @param {HTMLElement} button - The button elelement to add new timeblocks\n * @param {HTMLElement} counterElement - A counter field keeping track of the time blocks\n * @param {int} maxCount - The max amount of sections allowed before hiding the button\n */\nfunction updateButtonVisibility(button, counterElement, maxCount) {\n    let counter = parseInt(counterElement.value, 10);\n\n    if (counter >= maxCount) {\n        button.style.display = \"none\";\n    } else {\n        button.style.display = \"block\";\n    }\n}\n\ndefine([], function() {\n    return {\n        init: function() {\n            let addTimeBlockDefaultButton = document.getElementById(\"id_timeblock_add_fields\");\n            let addTimeBlockCustomButton = \"\";\n            let addExceptionDefaultButton = document.getElementById(\"id_exception_add_fields\");\n            let addExceptionCustomButton = document.getElementById(\"add-holiday-button\");\n\n            removeDefaultButtons([addExceptionDefaultButton, addTimeBlockDefaultButton]);\n\n            redirectCustomButtonToDefaultAction(addTimeBlockCustomButton, addTimeBlockDefaultButton);\n            redirectCustomButtonToDefaultAction(addExceptionCustomButton, addExceptionDefaultButton);\n\n            const timeblockCounter = document.querySelector('[name=\"timeblock_repeats\"]');\n            const exceptionsCounter = document.querySelector('[name=\"exception_repeats\"]');\n\n            updateButtonVisibility(addTimeBlockCustomButton, timeblockCounter, 2);\n            updateButtonVisibility(addExceptionCustomButton, exceptionsCounter, 2);\n        }\n    };\n});"],"names":["redirectCustomButtonToDefaultAction","customButton","defaultButton","addEventListener","click","updateButtonVisibility","button","counterElement","maxCount","counter","parseInt","value","style","display","define","init","addTimeBlockDefaultButton","document","getElementById","addExceptionDefaultButton","addExceptionCustomButton","forEach","parentElement","className","timeblockCounter","querySelector","exceptionsCounter"],"mappings":"AAkBA,SAASA,oCAAoCC,aAAcC,eACnDD,cAAgBC,eAChBD,aAAaE,iBAAiB,SAAS,WACnCD,cAAcE,WAW1B,SAASC,uBAAuBC,OAAQC,eAAgBC,cAChDC,QAAUC,SAASH,eAAeI,MAAO,IAGzCL,OAAOM,MAAMC,QADbJ,SAAWD,SACY,OAEA,QAI/BM,yCAAO,IAAI,iBACA,CACHC,KAAM,eACEC,0BAA4BC,SAASC,eAAe,2BAEpDC,0BAA4BF,SAASC,eAAe,2BACpDE,yBAA2BH,SAASC,eAAe,sBAElC,CAACC,0BAA2BH,2BA7CjDK,SAAQf,SACRA,OAAO,KACMA,OAAO,GAAGgB,cAChBC,UAAY,aA4CnBvB,oCAN+B,GAM+BgB,2BAC9DhB,oCAAoCoB,yBAA0BD,iCAExDK,iBAAmBP,SAASQ,cAAc,8BAC1CC,kBAAoBT,SAASQ,cAAc,8BAEjDpB,uBAZ+B,GAYkBmB,iBAAkB,GACnEnB,uBAAuBe,yBAA0BM,kBAAmB"}