{"version":3,"file":"punchclock_setup.min.js","sources":["../src/punchclock_setup.js"],"sourcesContent":["/**\n * Remove default buttons since custom buttons are used.\n * @param {Array} buttons - List of buttons to remove\n */\nfunction removeDefaultButtons(buttons) {\n    buttons.forEach(button => {\n        if (button) {\n            let buttonBox = button.parentElement.parentElement;\n            buttonBox.className = \"d-none\";\n        }\n    });\n}\n\n/**\n * Use the click event of the custom button to trigger the default click action.\n * @param {HTMLElement} customButton - The custom button\n * @param {HTMLElement} defaultButton - The default button\n */\nfunction redirectCustomButtonToDefaultAction(customButton, defaultButton) {\n    if (customButton && defaultButton) {\n        customButton.addEventListener(\"click\", function() {\n            defaultButton.click();\n        });\n    }\n}\n\n/**\n * Time Block Button Visibilty controller. Hides the button once a second time block has been added.\n * @param {HTMLElement} button - The button elelement to add new timeblocks\n * @param {HTMLElement} counterElement - A counter field keeping track of the time blocks\n * @param {int} maxCount - The max amount of sections allowed before hiding the button\n */\nfunction updateButtonVisibility(button, counterElement, maxCount) {\n    let counter = parseInt(counterElement.value, 10);\n\n    if (counter >= maxCount) {\n        let buttonBox = button.parentElement.parentElement;\n        buttonBox.className = \"d-none\";\n    }\n}\n\ndefine([], function() {\n    return {\n        init: function() {\n            let addTimeBlockDefaultButton = document.getElementById(\"id_timeblock_add_fields\");\n            let addTimeBlockCustomButton = document.getElementById(\"add-timeblock-button\");\n            let addHolidayDefaultButton = document.getElementById(\"id_holiday_add_fields\");\n            let addHolidayCustomButton = document.getElementById(\"add-holiday-button\");\n\n            removeDefaultButtons([addHolidayDefaultButton, addTimeBlockDefaultButton]);\n\n            redirectCustomButtonToDefaultAction(addTimeBlockCustomButton, addTimeBlockDefaultButton);\n            redirectCustomButtonToDefaultAction(addHolidayCustomButton, addHolidayDefaultButton);\n\n            const timeblockCounter = document.querySelector('[name=\"timeblock_repeats\"]');\n            const holidaysCounter = document.querySelector('[name=\"holiday_repeats\"]');\n\n            updateButtonVisibility(addTimeBlockCustomButton, timeblockCounter, 2);\n            updateButtonVisibility(addHolidayCustomButton, holidaysCounter, 4);\n        }\n    };\n});"],"names":["redirectCustomButtonToDefaultAction","customButton","defaultButton","addEventListener","click","updateButtonVisibility","button","counterElement","maxCount","parseInt","value","parentElement","className","define","init","addTimeBlockDefaultButton","document","getElementById","addTimeBlockCustomButton","addHolidayDefaultButton","addHolidayCustomButton","forEach","timeblockCounter","querySelector","holidaysCounter"],"mappings":"AAkBA,SAASA,oCAAoCC,aAAcC,eACnDD,cAAgBC,eAChBD,aAAaE,iBAAiB,SAAS,WACnCD,cAAcE,WAW1B,SAASC,uBAAuBC,OAAQC,eAAgBC,aACtCC,SAASF,eAAeG,MAAO,KAE9BF,SAAU,CACLF,OAAOK,cAAcA,cAC3BC,UAAY,UAI9BC,yCAAO,IAAI,iBACA,CACHC,KAAM,eACEC,0BAA4BC,SAASC,eAAe,2BACpDC,yBAA2BF,SAASC,eAAe,wBACnDE,wBAA0BH,SAASC,eAAe,yBAClDG,uBAAyBJ,SAASC,eAAe,sBAEhC,CAACE,wBAAyBJ,2BA5C/CM,SAAQf,SACRA,SACgBA,OAAOK,cAAcA,cAC3BC,UAAY,aA2CtBZ,oCAAoCkB,yBAA0BH,2BAC9Df,oCAAoCoB,uBAAwBD,+BAEtDG,iBAAmBN,SAASO,cAAc,8BAC1CC,gBAAkBR,SAASO,cAAc,4BAE/ClB,uBAAuBa,yBAA0BI,iBAAkB,GACnEjB,uBAAuBe,uBAAwBI,gBAAiB"}